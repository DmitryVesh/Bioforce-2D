===============================================================================================================================
Version 1.0.1
---------------

Summary
-------
Main goals is to;
	0 Add more particle effects when bullet being shot out of gun
	0 Add screen shake and hit marker when you hit a player
	0 Add pitch changes to player sounds, to make them feel more unique

	0 Add health pickups
	0 Add adrenaline pickup
	0 Make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	0 Remove any references to Ping Server values
	0 Remove Manual Server Entry

Future tasks;			
	version 1.0.2
		Delete all GameServer Code in Unity project
		Add invincibility frames, after being hit/respawning
		Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...
		Implement actual deathmatch server like rules, timer for each round, after timer ends, the round ends showing scoreboard
	version 1.0.3
		add breathing camera movement when player is idle, going up and down.
		using cinemachine add impulses, fast small camera movements in specific directions, for:
			Player Getting shot
			Player shooting
			Player jumping
			Player running
		Make so when the player is down the collisions are not occuring when shot
		Add heartbeat sound effects when low on health, increases with volume as player gets more damaged, similar to permanent damage overlay Alpha var
	version 1.0.4
		Make the scoreboard reuse scoreboard entries, instead of destroying them, when a player disconnects.
		Allow players to choose their own colour
	version 1.0.5
		Add tutorial level into game

	Add chat into game
	Add ping field to Player Score entries in scoreboard
	Add gamepad support for pc & mac
	Make server sided, currently very client sided

	make the ThreadManager to work on multi-threading
	
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.

===============================================================================================================================
Version 1.0.0
---------------

Summary
-------
Main goals is to;
	1 Make particle systems stay in place where the play was hit
	1 Make all MainServer & GameServer exceptions that crash the process be logged in a txt file excLog.txt
	1 Fix random server breakdowns 
		1 TCPServer System.Collections.Generic.Dictionary
		1 Cannot access a disposed object System.Net.Socket.Socket at GameServer.ClientServer.Disconnect
		1 Null reference at GameServer.ClientServer.Disconnect
	1 Fix bullets hitting own other player when they are running in opposite direction to shooting
	1 Make 1 server always be present, with no timeout called Welcome

	1 Make so the player name/server name can not have swear words in them.
	1 Make client sided timeout when haven't received data from the GameServer in x amount of time
	1 Make so when the Welcome/persistent server crashes, make a new 1

	1 Add temporary hit screen
	1 Add permanent health damage screen
	1 Add camera shake when getting hit
	1 Add camera shake when shooting
	1 Add camera shake when jumping

	1 Add different music - White Bat Audio
	1 Make About Screen giving credit to asset makers like Music - White Bat Audio
	1 Add particle effects to bullets hitting collider
Future tasks;	
	version 1.0.1
		Add health pickups
		Add adrenaline pickup
		Make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
		Remove any references to Ping Server values
		Remove Manual Server Entry
	version 1.0.2
		Delete all GameServer Code in Unity project
		Add invincibility frames, after being hit/respawning
		Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...
		Implement actual deathmatch server like rules, timer for each round, after timer ends, the round ends showing scoreboard
	version 1.0.3
		add breathing camera movement when player is idle, going up and down.
		using cinemachine add impulses, fast small camera movements in specific directions, for:
			Player Getting shot
			Player shooting
			Player jumping
			Player running
		Make so when the player is down the collisions are not occuring when shot
		Add heartbeat sound effects when low on health, increases with volume as player gets more damaged, similar to permanent damage overlay Alpha var
	version 1.0.4
		Make the scoreboard reuse scoreboard entries, instead of destroying them, when a player disconnects.
		Allow players to choose their own colour
	version 1.0.5
		Add tutorial level into game

	Add chat into game
	Add ping field to Player Score entries in scoreboard
	Add gamepad support for pc & mac
	Make server sided, currently very client sided

	make the ThreadManager to work on multi-threading
	
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.

===============================================================================================================================
Version 0.5.7.3
---------------

Summary
-------
Main goals is to;
	1 Fix being able to take damage whilst down 
	1 prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
		just tested this out, and it doesn't occur anymore... probably the exception handling/player movement updates changed
		causing it to not be an issue anymore!
	1 Make servers are able to be sorted by Name, Players, Map, etc...
		simply update the ListOfIndexesToCompare
	1 Make so a player joining to full server is sent a message
	1 Add particle effects when hit player
	1 Add splatters when a player gets hit/dies onto the environment
	1 Lookahead at where the user is pointing
	1 Make Main Menu background move right to left and left to right
	1 Add total num ever connected ips to MainServer
	1 Fix never ending transition when player tries to create a server, with no connection to MainServer (use ServerMenu states)
		NoMoreServersAvailable client side packet handler!
	1 Fix spawning in characters at 0,0 and interpolating into actual position, better to spawn in at current player position!
	1 Fix taking damage when player is down

Future tasks;	
		
	version 0.5.7.4
		add health pickups
		add adrenaline pickup
		make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	version 0.5.7.5
		Add invincibility frames, after being hit/respawning
		Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...
		Implement actual deathmatch server like rules, timer for each round, after timer ends, the round ends showing scoreboard
	version 0.5.7.6
		add breathing camera movement when player is idle, going up and down.
		using cinemachine add impulses, fast small camera movements in specific directions, for:
			Player Getting shot
			Player shooting
			Player jumping
			Player running
	version 0.5.7.7
		Make the scoreboard reuse scoreboard entries, instead of destroying them, when a player disconnects.
		Allow players to choose their own colour
	version 0.5.7.8
		Add tutorial level into game

	Add chat into game
	Add ping field to Player Score entries in scoreboard
	Add gamepad support for pc & mac
	Make server sided, currently very client sided

	make the ThreadManager to work on multi-threading
	
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.

===============================================================================================================================
Version 0.5.7.2
---------------

Summary
-------
Main goals is to;
	1 Implement quit current game option
	1 Make a main menu screen, and add a volume settings menu, pause menu
	1 Assign each player a color, and change the color of name on kill field to corresponding player color
	1 Fix bug when a player is killed multiple times at once, (probably have to set a field which states when can call that you can die)
	1 Add communication between the MainServer and GameServers
	1 Add server updates, how many players playing on the server
	1 Add server destruction, when a server is idle with no players gets deleted
	1 When a player exits the game (without killing the app) "Deactivate the player", and if exited for too long kick player
	1 Fix bug where player spawned in, and is in 1 position only, however after respawn changes position, 
		so must be problem with getting the other player's position, in UpdateMain of server
		Occured due to sending via UDP, so packets sometimes were blocked for some reason...	
	1 Fix muzzelflash anim being stuck in wrong frame.
	1 Make all inputs passed through valid chars, instead of invalid chars	

Future tasks;	
		
	version 0.5.7.3	
		Make servers be able to sort by Name, Players, Map, etc...
		Lookahead at where the user is pointing
		Implement actual deathmatch server like rules, timer for each round, after timer ends, the round ends showing scoreboard
		Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...
	version 0.5.7.4
		make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	version 0.5.7.5
		Add invincibility frames, after being hit/respawning
	version 0.5.8.1
		add breathing camera movement when player is idle, going up and down.
		using cinemachine add impulses, fast small camera movements in specific directions, for:
			Player Getting shot
			Player shooting
			Player jumping
			Player running
	version 0.5.8.2
		Make the scoreboard reuse scoreboard entries, instead of destroying them, when a player disconnects.
	version 0.6.0
		
		
	
	
	Add chat into game
	Add ping field to Player Score entries in scoreboard
	Add gamepad support for pc & mac
	Make server sided, currently very client sided

	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.	

===============================================================================================================================
Version 0.5.7.1
--------------

Summary
-------
Main goals is to;
	Implement shooting where the player aims their mouse/touch, have a crosshair and dynamic arms holding gun
	1 Lerp between players' positions
		1 Find & Import a crosshair	
		1 Make player model support 360 degree movement with the arms
		1 Make Gun model seperate to player model
		1 Make so the character's model follows place where player is pointing
		1 When player shoots, shoots in the direction where player's pointing
		1 Sync muzzelFlash with arms
		1 Sync player rotation on Multiplayer
		1 Add mobile support
Future tasks;	
	version 0.5.7.2
		Assign each player a color, and change the color of name on kill field to corresponding player color.
	version 0.5.7.3
		Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...
	version 0.5.7.4
		make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	version 0.5.7.5
		Add invincibility frames, after being hit/respawning

	version 0.5.8.1
		add breathing camera movement when player is idle, going up and down.
		using cinemachine add impulses, fast small camera movements in specific directions, for:
			Player Getting shot
			Player shooting
			Player jumping
			Player running
	version 0.5.8.2
		Make a main menu screen, and add a settings menu.
	version 0.5.8.3
		Make the scoreboard reuse scoreboard entries, instead of destroying them, when a player disconnects.


	version 0.6.0
		Implement actual deathmatch server like rules, timer for each round, after timer ends, the round ends showing scoreboard
		
	
	
	Add chat into game
	Add ping field to Player Score entries in scoreboard
	Add gamepad support for pc & mac
	Make server sided, currently very client sided

	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.	

===============================================================================================================================
Version 0.5.6 - too many updates for the documentation...
-------------

Summary
-------
Main goals is to;
	Make a competitive feel to the game by adding a scoreboard

		1 add scoreboard, opened when a player holds the Scoreboard button - TAB, or if on mobile, when an scoreboard icon is pressed
			- Sorted via merge sort

		1 Make so LAN connection tries to connect to your actual lan connection, and not hard coded values - using parallel programming: threading and asynchronous
			threaded works on more powerful computers, but found an easier way, UDP Broadcast.

		0 add invincibility frames, after being hit/respawning

		0 add chat into game
		0 add ping field to Player Score entries in scoreboard
		0 add gamepad support for pc & mac

Future tasks;	
	
	version 0.5.7.1
		Implement shooting where the player aims their mouse/touch, have a crosshair and dynamic arms holding gun
	version 0.5.7.2
		Assign each player a color, and change the color of name on kill field to corresponding player color.
	version 0.5.7.3
		Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...
	version 0.5.7.4
		make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	

	version 0.5.8.1
		add breathing camera movement when player is idle, going up and down.
		using cinemachine add impulses, fast small camera movements in specific directions, for:
			Player Getting shot
			Player shooting
			Player jumping
			Player running
	version 0.5.8.2
		Make a main menu screen, and add a settings menu.
	version 0.5.8.3
		Make the scoreboard reuse scoreboard entries, instead of destroying them, when a player disconnects.


	version 0.6.0
		Implement actual deathmatch server like rules, timer for each round, after timer ends, the round ends showing scoreboard
		
	
	Make server sided, currently very client sided

	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.	


TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Gimp
----

Importing assets
----------------
1 Imported clock, and Scoreboard button art asset for the scoreboard manager.

Animator
--------


UnityEditor
-----------
//Get scoreboard to work
1 Added Scoreboard to Canvas, empty UI object with a ScoreboardManager script attached to it.
1 Added Scoreboard Panel to scoreboard, has a vertical layout grop which controls the height of the child game objects, key and player score entries.
1 Added Key prefab, which is the namings of different attributes in the player score panel. Ping, Player (name), Kills, Deaths and score.
1 Added Player score Panel prefab, which contains seperate child objects with textmeshes that are used for ping, player (name), kills, deaths and score.
	Added a panel image to the panel, so when a players are assigned colours, can change the color of the panel, to the player's color. 
	Attached ScoreboardEntry script, which will control the textMeshes in children objects.
1 Edit Project settings, added Scoreboard button to input, which is set to TAB.
1 Add a Scoreboard button, which is only shown on mobile versions, and add an OnClickEvent, which triggers the appearence/disappereance of scoreboard.

//Adding automatic scanning of LAN connection ip
1 Remove LocalHost option from IP Connection Settings, as LAN option identifies LocalHost option too.

Implementing scripts
--------------------
//Get scoreboard to work
1 Added ScoreboardManager script, singleton instance, which manages the scoreboard entries. Instantiates a scoreboard entry when adding an entry,
	and calls the set method for the entry. Stores references to entries in a dictionary of iD, scoreboardEntry, so can quickly add kills/deaths.
	Has a varialbe named ScoreboardChanged, set to true when an entry changes, if this happens in the next fixedUpdate, the scoreboard dictionary
	gets sorted by the player's score via use of merge sort, if score's are the same, then the number of deaths is used. 
	The entries are sorted using linear search, setting the siblingIndex to first,
	so as foreach runs through ascending order of score, the player with the highest scores is placed on top, ordering in terms of score.
	On a player disconnection, DeleteEntry is called by GameManager, destroying the entry gameObject and dictionary entry.
	Added ChangeScoreboardActivity, which sets active scoreboard, to the not, version of what is currently ScoreboardActive set to.
1 Added ScoreboardEntry script, holds the info for a single scoreboard entry, the iD, score, username, kills and deaths. Has references to each 
	textMeshes found in ScoreboardEntryPrefab, and sets accorignly. Also gets call to add kills and deaths.
1 Edit ClientRead, in PlayerSpawn packet hanlder, getting the kills death and score, Calling ScoreboardManager to add an entry.
	In PlayerDied packet, adding kills and deaths to the ScoreboardManager.

//Fix UI chat entries errors, when 4 or more players join in total
1 Edit UIEntryManager, GetEntry, changed the param to be a ref, so can set the inactiveEntryIndex to entry's sibling index, before used to get
	an entry, but the index remained -1, so EntryText was given -1, causing error. Also now the queue of activeEntries is a tuple value,
	with a GameObject and Coroutine, because each time an entry is added, a coroutine is started to remove the entry.
	However, if a GetLongestActiveEntry is called, then mutliple coroutines will be called on same entry, causing the activeEntries queue
	to try and dequeue from an empty queue. So now have reference to the Coroutine with each entry added to queue, so can StopCoroutine on last entry.

//Fix Health bars being out of sync when a player joins, and other players are present, with damaged health bars
1 Edit ClientRead, SpawnPlayer, read Player's Max & Current Health from packet, and pass it to the GameManager, SpawnPlayer.
1 Edit GameManager, SpawnPlayer, add params max & current health, and call NonLocalPlayerHealth SetSpawnedHealth.
1 Edit NonLocalPlayerHealth, Add SetSpawnedHealth, which sets the max and current health.

//Adding automatic scanning of LAN connection ip
1 Edit Client, 
	Changed LAN ip address to "LAN",
	Edit ConnectToServer, made it an async method, if the IPAddressConnectTo is set to "LAN", Sets the ip to connect to the await of LANServerScanner.GetLANIPAddress,
	giving the PortNum to connect to.
	Times out if its null, (0 ips found with open game port),
	Remove the IPAddressLocalHost, as LAN connection can identify if player is not on a network, and run via localHost.
0 Add LANServerScanner, static asynchronous class which is used to get a server IP address from LAN connection, via scanning all ip addressses, with specific port open on local network
	Fields: 
		IPsWithOpenGamePort list of string, used to store any successful scans of the ipAddress of the port
		Port number, timeOut time in miliseconds, IPList, and leadingLANIP
	Gets local network ip address of the machine running the game,
	If the localNetworkIp is null, then returns null, if the ip startsWith "127.0.0" identifying localHost, then returns the all the local ip.
	Scans the IP addresses in local network, by trying to connect to the ip addresses from range of 1 - 254 on the 4th octete x.x.x.1 - x.x.x.254
	A number of new threads ranging the number of different ips, are started, giving the ScanIP method, and each thread is ran asynchronously/parallel, and added Task array with all the threads.
	ScanIP, connects to the ip via TcpClient async method, and returns the IAsyncResult,
	The thread running the scan of the ip then awaits, till the IAsyncResult waits for 1 seconds if the connection is established, then checks if the tcpClient isConnected, if it is adds the ip to 
	IPsWithOpenGamePort, proceeds to close the tcpClient The 1 seconds acts as a timeout for the connection, is low, due to LAN connections being fast.
	After all threads are added, they are all awaited till they finish executing the ScanIP method.
	Returns single ip if only 1 ip was found, returns null if no ips found, returns "many" if more than 1 found.
1 Add IPList, contains the range of the IP addresses to try and connect to, also responsible for giving out the CurrentIP to all threads, yet to be processed.

0 Test out when multiple users are running the game on same lan connection
0 Test out when multiple servers are running the game on same lan connection

GameServer code
---------------
//Get scoreboard to work
1 Edit Player, added fields for Kills, Deaths, and score
1 Edit ServerRead, adds kill to the player if the client who id and the killer's ids dont match.
1 Edit ServerSend, added player fields Kills, Deaths and Score into the SpawnPlayer packet. So when a player joins, if players already have gotten kills, they are displayed
	to the player who just joined.

//Fix Health bars being out of sync when a player joins, and other players are present, with damaged health bars
1 Edit ServerRead, TookDamageRead, Setting the player's health to value in packet.
1 Edit Player, Add a MaxHealth & CurrentHealth fields. In constructor, set the maxHealth to currentHealth.
1 Edit ServerSend, SpawnPlayer, added Player's Max & Current Health fields to packet.

===============================================================================================================================
Version 0.5.5
-------------

Summary
-------
Main goals is to;
	Improve overall gameplay response, and game feel, by showing player data.
		1 Animate the banners in the map
		1 Add a sound mixer system, which all sound effects sub categorise and use, so can control volume by settings 
		1 Add sound effects to player running, sprinting, jumping and dying
		1 add sound effects for bullets being shot
		1 Add an ip connection setting called manual, which you have to type in the ip address.

		1 change sending playermovement position to vector2 - reduce data sent
		1 change sending playermovement rotation to bool isGoingRight - reduce data sent

Future tasks;		
		
	version 0.5.6
		add scoreboard, opened when a player holds the Scoreboard button - TAB, or if on mobile, when an scoreboard icon is pressed
		Make so LAN connection tries to connect to your actual lan connection, and not hard coded values
		add invincibility frames, after being hit/respawning
		add chat into game
		add gamepad support for pc & mac
	
	version 0.5.7
		Implement shooting where the player aims their mouse/touch, have a crosshair and dynamic arms holding gun
		Assign each player a color, and change the color of name on kill field to corresponding player color.
		Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...
		make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	
	version 0.5.8
		add breathing camera movement when player is idle, going up and down.
		using cinemachine add impulses, fast small camera movements in specific directions, for:
			Player Getting shot
			Player shooting
			Player jumping
			Player running
		Make a main menu screen, and add a settings menu.

	version 0.6.0
		Implement actual deathmatch server like rules, timer for each round, after timer ends, the round ends showing scoreboard
		
	
	Make server sided, currently very client sided

	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.	


TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Gimp
----

Importing assets
----------------
1 Import audio clips for: music, player sound effects. Reduce their quality settings, so original file size is reduced


Animator
--------
1 Animated all banner prefabs.


UnityEditor
-----------
//Get Sound mixer system to work
1 Add Main Mixer, set it to be the root of all sound effects. Expose its volume setting.
	Add sub categories - Music, Sound Effects - Players
1 Add Sound MusicManager empty gameObject, attach audio source and SoundMusicManager. Set the StartingMusic in the MusicManager script.
1 Add Sound PlayerManager empty gameObject, attach audio source and SoundPlayerManager. The audioSource is a 3D audio source, 
	which has a logarthimic range, so if audio lister, which is the main camera, is in range, can hear the sound at a varying volume.
1 Add audio source and SoundPlayerManager to playerModel gameObject.

//Get manual ip address override to work
1 Edit IP address dropdown in the Network menu. Add another option, with name Manual.
1 Add an IPAddressOverride input field, which will be activated so can enter override ip.

Implementing scripts
--------------------
//Get sound mixer system to work
1 Add MusicManager, singleton instance, which controls an audio source which plays the game music. Contains references to AudioTracks, to play.
	e.g. contains StartingMusic, which is played in the beginning of the game.
	Contains a AudioListenerTF, which is the mainCamera transform. An audio source, through which the music will be played, attached to gameObject.
	And checks for KeepFadingIn/Out and Looping. 
	Is able to effectively, fade music in and out, and change music being played by adjusting the volume of the audioSource
	By use of IEnumarator, yield return new WaitForSecondsRealtime, which is updated every time.FixedDeltaTime.
	Can't use WaitForFixedUpdate, because when the game will be paused, it cause the fixedUpdate to stop being called, so can't transition between music.	
1 Add AudioTrack, non mono behaviour class, which is set to be System.Serializable - so can edit in inspector, when compisited with another object,
	which holds the information about an audio track. Its audio clip, volume, if it should loop/fade, and its fade time.
1 Add SoundPlayerManager, Contains all the sound effects a player has, Shoot, Jump, footsteps, wasHit, Die by bullet, Die by fall.
	Subscribe to PlayerManager OnShootEvent and OnPlayerJump event to play shooting and jumping sounds. For footsteps, it was easy just to add triggers
	to run and sprint animations, to figure out when to call AnimatorFootsteptSound.
1 Edit PlayerManager, added an onShootEvent, which is called by LocalPlayerGun when shootbutton is pressed. Added OnPlayerJumped event, 
	which called by LocalPlayerMovements playerJump.
1 Added enum TypeOfDeath, which will be used to identify the reason for death of the player. Currently only hold Bullet and Fall.

//Get manual ip address override to work
1 Edit NetworkMenuUI, add reference to the IPAddressOverrideInputField. Edit ip address dropdown handler.
	Checks if index is 3 (manual selected), then activate the ipaddress override input field, setting overrideIp to true, else false, and changeIPAddress to connect to
	in Client Instance.
	When pressing connect button, and using manual ip setting, the ip address in input field is checked to be in the right format, if it is proceed connection,
	if not, then display manual ip address format error message.
1 Edit Client, add a handlder for option "Manual", which is the 3rd index in dropdown list.
	Changed ConnectToServer takes in a bool IPoverride, and string IP, if override is true, then set ConnectIPAddress to IP address given.
	Added a static method IsIPAddressValid, which checks if a string is in a corrent IPv4 address format. If correct returns true, else false.
	has to be 4 inputs in between '.', each input is min 0, max 255. Valid addresses: 0.0.0.0 - 255.255.255.255

GameServer code
---------------
1 Edit ServerRead, read the typeOfDeath int from the packet sent from client.
1 Edit ServerSend, write the typeOfDeath int from the server read, to the packet.

===============================================================================================================================
Version 0.5.4
-------------

Summary
-------
Main goals is to;
	Improve overall gameplay response, and game feel, by showing player data.
		1 add map boundries, so if player falls off map, dies and camera stays in boundry
		1 add player respawn points, so when player dies, instead of respawning where died, goes to a random respawn point
		
		1 adding a game chat, which will display player connected and disconnected messages.
			Further uses are, in-game chat system, and server info, like round ending in x mins...

		1 Fix bullets being saved in hierarchy after server is shutdown, and player is ejected from game.
		1 Fix own bullets hitting the player and destroying them when player is running left or right.
		
		1 add local player stamina bars
		1 add local player health bar 
		1 and non local player health bars
		
		1 Add muzzel flash when a player shoots, randomly chooses which animation to play
		1 Implement Damage nums
		1 Add an impact effect for when the bullet hits a collider

Future tasks;		
	version 0.5.5 
		add a mixer system, which all sound effects sub categorise and use, so can control volume by settings 
		add sound effects to player running, sprinting, jumping, dying and respawning
		sound effects for bullets being shot and hitting
		Implement shooting where the player aims their mouse/touch, have a crosshair and dynamic arms holding gun

	version 0.5.6
		add invincibility frames, after being hit/respawning
		add chat into game
		add gamepad support for pc & mac

	Assign each player a color, and change the color of name on kill field to corresponding player color.
	change sending playermovement position to vector2 - reduce data sent
	change sending playermovement rotation to bool isGoingRight - reduce data sent	
		
	Make server sided, currently very client sided
	Make so LAN connection tries to connect to your actual lan connection, and not hard coded values
	
	Add animations to banners
	Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...

	Add player disconnections if the server suspects the player of movement cheating
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.
	fix player move validation, when respawned, should ignore any changes that occured lately.	

	add breathing camera movement when player is idle, going up and down.
	add music Spoiler - Original Mix (Hyper) to game.

TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Gimp
----
1 Make all the blue muzzel flashes to grey scale images, using Gimp, so can reuse same sprite for many colours.
1 Make the bullet sprites into grey scale too.

Importing assets
----------------
1 Imported icon which will be presented as icon of the game.
1 Import doom font
1 Import Impact effect sprites

Animator
--------
1 Fixing the player animator controller, so jump animation gets called from specific states, and not from any state.
	Prevents player that got killed in mid air, from not playing the die animations.

//Get muzzel flash to work
1 Added 10 muzzel flash animations to a MuzzelFlash gameObject animator, and linked them together using idle state.
	contains params Trigger shot, and Int flashIndex, shot is used to determine if need to play anim, and flashIndex which flash anim.

//Get Impact effect to work
1 Added ImpactEffect animation to the Bullet, added 2 triggers to bullet, a shot and hit trigger, will be set in bullet script.

UnityEditor
-----------
1 Changed the Floating Joystick sprites in background and in handle to improve aesthetics. Made bigger
1 Added Empty gameObject called Boundries, which will store the FallBoundries, InvisibleBoundries, and CameraBoundries
1 Add FallBoundries gameObject, with trigger box collider. Attach FallBoundry script to it. Made into prefab
1 Add CameraBoundries gameObject, with trigger Polygon Collider,
1 Edit CinemachineCamera in LocalPlayer a prefab, and set the CinemachineCamera in Mobile player to the prefab, so changes made to prefab
	will propegate to both players. Attached CinemachineConfiner, CameraBoundries script, so can confine camera to camera boundries collider.
1 Add PlayerBoundries gameObject, which contain box colliders, which constrict where the player can go.
1 Add empty RespawnPoints gameObject, with many scattered children gameObjects Point, which will act as spawn points. 
	Attach RespawnPoint script to it.

1 Edited KillFeedEntries, removed some, so only 11 instead of 15 made bigger, and in the panel holder, made it so it uses child's scale, 
	so can scale the panel properly.
1 Edited Environment, made houses a bit closer, so players can see and make jumps easier.
1 Added a boundry to the right, and made a boundry prefab.
1 Added white semi transparent background to player usernames so easier to see, increased font size, and change the font to Doom font
1 Edit networking menu font to doom font.
1 Moved Client, ClientRead, ClientSend and PlayerManager scripts into Networking folder.

//Get chat to work
1 Add Chat gameobject to the canvas, will hold in-game chat. Attach InGameChat script to it. Similar to KillFeedUI,
	however contains ChatEntries instead of KillEntries.

// Get health bars to work
1 Add LocalHealthAndStaminaCanvasgameObject to the LocalPlayer, which holds a panel for the 2 Stamina sliders, and another panel for Health slider.
	The StaminaPanel has a StaminaBar script, the HealthPanel has a HealthBar script

//Get muzzel flashes to work
1 Added muzzel flash to player model prefab, and attached muzzelFlash script to it.
1 Deleted all older flashes, only using grey scale ones.
1 Edit Bullet prefab, uses greyscale sprites instead.


//Get DamagNums to work
1 Added DamageNum prefab, which contains TextMeshProText, and DamageNum script. Used to display the damage number.
1 Added DamageNumCanvas to PlayerModel, so all players contain the ability to display damageNums when hit. 
	Contains DamageNumManager

Implementing scripts
--------------------
1 Add FallBoundry script, has an OnTriggerEnter2D method, which checks if the gameObject is an IHealth interface, 
	and if it is local player, then calls FallDie method
1 Edit IHealth, added FallDie method.
1 Edit NonLocalPlayerHealth, added FallDie, which is similar to simple, die, but in future other events will be added to the death, like player fall sounds.
1 Add CameraBoundries script, a singleton, which holds the camera polygon Collider, in future, more than 1 colliders, so need to access multiple colliders.
	Also contains a ResetCamera method which is subscribed to the OnPlayerRespawn event, so can get rid of jiterniess when warping to spawn point.
1 Edit PlayerCameraController, added cam confiner field, and added awake method which caches and sets the bounding shape of the camera script.
	Added OnPlayerRespawn event, which ResetsCamera, avoiding jitteriness of camera when warping spawn locations.

1 Add RespawnPoint, a singleton script, which gets all its children transforms, and returns a random 1, when a GetRandomSpawnPoint is called.
	Stores the last respawn and die position, so playerCamera controller can access it, during its ResetCamera method called OnPlayerRespawned
1 Edit LocalPlayerNovement, adding SetRespawnPointLocation to the overriding IEnumarator UnFreezeMotionAndHitBox..., which sets model object's positon to respawnPoint
	GetRandomSpawnPoint.
1 Edit EntityWalking, making freezing motion and unfreezing, set velocity to 0, and making static when dead, and not when alive. 
	Fixing when player falls sideways, and flies out of map when respawning.
1 Bug, when respawning another player, the non local player jitters, trying to fix by making UnFreezeMotionAndHitBox virtual, so local player,
	can override and setRespawnPointLocation.
	Also LocalPlayer overrides the freeze motion, to make the rb bodyType to dynamic, whilsts the entity walking default is isKinematic.
1 Renamed SimpleNetworkingUI to NetworkingUI.
1 Edit NonLocalPlayerGun, OnDestroy event iterates through all bullets in the bulletList, and destroys their gameObject.
1 Edit Bullet, OnCollisionEnter2D, checks if the bullet is its own player's, if it is, then don't call bulletHit.


//Get chat working
1 Edit SimpleNetworkingUI, OnUsernameInputFieldChanged, so certain characters added, are not allowed to be entered, by simply deleting them,
	when user tries to enter them. Every username validation runs a RemoveInvalidChars method, which deletes any invalid chars from the string.
	Also usernames have to be minimum 3 chars in length to be valid.
1 Add UIEntryManager script, which is inherited by KillFeedUI and InGameChat. An abstract class, which holds almost all the KillFeedUI methods and fields,
	so can be reused by the InGameChat, to display messages as entries, similar to kill feed entries.
1 Edit KillFeedUI, inherits from UIEntryManager, moved generic entry methods and fields to the UIEntryManager, except the AddKillFeedEntry method, 
	and the turning on/off the borders/filling.
1 Add InGameChat, singleton, inherits from UIEntryManager, subscribes to the GameManager OnPlayerConnected/Disconnected events. 
	Contains a method AddInGameChatEntry, which takes in a string, and adds an entry to the game chat.
	Will get called by the PlayerConnectedMessage/Disconnected subscribers to the events.
1 Edit GameManager, added delegate and events OnPlayerConnected and OnPlayerDisconnected, to reduce dependancy, take iD and username. 
	Get called in SpawnPlayer, and DisconnectPlayer. Added param justJoined, in SpawnPlayer, passes it onto OnPlayerConnected.
1 Edit ClientRead, SpawnPlayer method gets the JustJoined, passes it to GameManager.


//Get health/stamina bars to work
1 Add Bar, aggregation to StatsBar, holds a slider, and sets the slider's max/min values, and current value.
	Also holds a Gradient value and slider fill image, which will be changed during setCurrentBarValue, to the slider normalised value.
1 Add StatsBar, abstract class, inherited by stamina/health Bars. Aggregation reference to StatsBar array, which is needed to hold the 2 bars, 1 going left-right
	1 right-left. Has abstract methods to GetMax & GetCurrent, which inherited classes have to implement.
	In Start, the statsBar are got from children, and each bar is assigned max value. In fixed update the 
1 Added IWalkingLocalPlayer interface, inherits from IWalking, exposes the CurrentStamina of the localPlayer, (need to use interface, because have 
	mobile version of local player and normal version.) Also fixes the LocalPlayerAnimations only getting has jumped from the non mobile version 
1 Add StaminaBar, inherits from StatsBar, holds reference to IWalkingLocalPlayer, setting its GetMax/GetCurrent values from the interface stamina values.
1 Edit IHealth, to have to implement get max health, & current health. So can be accessed by HealthBar.
1 Edit NonLocalPlayerHealth, implement the new IHealth methods. 
	Added to TakeDamage  a call to ClientSend.TookDamage.
1 Add HealthBar, inherits from StatsBar, holds reference to IHealth, and sets the GetMax/GetCurrent to IHealth health values.
1 Edit ClientSend, added TookDamage method, which sends the damage player received and currentHealth after damage applied.
1 Edit Packet, added to ClientPackets & ServerPackets tookDamage enum.
1 Edit Client, added TookDamage server packet to packet handler.
1 Edit ClientRead, added TookDamage method, called by Client packetHandler, calls PlayerManager's tookDamage method.
1 Edit PayerManager, added OnPlayerTakeDamage event,
	added TookDamage method, which calls the OnPlayerTookDamage event.
1 Edit NonLocalPlayerHealth, added reference to playerManager, and subscribe to the OnTookDamage Event with the TookDamage method
	sets the currentHealth to the health sent. Subscribed to OnPlayerRespawn event, resetingHealth of player.

//Get muzzel flashes to work - Going to make a class that holds all the effects, like muzzel flash
1 Add MuzzelFlash, holds the number of flashes, and animator. When PlayFlash is called, the animator trigger shot is called,
	and the integer flashIndex is set to a random value between 0, and numFlashes.
1 Edit NonLocalPlayerGun, added reference to MuzzelFlash, and PlayerColor. The ShootBullet method now Calls the MuzzelFlash PlayFlash method.
	Also in Start, set the MuzzelFlash color to player color, and when adding a bullet, set its color to player color too.

//Get damage nums to work
//Need to setup system similar to the Bullet - Gun relationshipff
1 Added DamageNum, is placed onto damageNumPrefab. Controls the activation of damage numbers.
	The damage numbers are moved up and to the right/left depending on which direction the bullet hit the target. 
	The size is increased initially small amounts, but then a larger amount, to simulate the damage nums blowing up.
	After time to live passes, the damage num is faded away, and when the fully transparent, reset it.
1 Added DamageNumManager, Has an create method, which gets a DamageNum, from either stored list of damageNums, or Instantiates/sets a new 1, and sets its parent to itself.
	Contains reference to the prefab to instantiate, and a List which holds the DamageNums instantiated.
1 Added PhysicsHelper, a class which will be used to check if the collision occured is goingRight or not.
	GoingRight, checks if target position x is greater than collider position, if yes going right is false.
	Also can generate a random bool, used in TookDamage playerManager, when Creating a damageNumber.
1 Edit PlayerManager, add to the TookDamage method, creating a damageNumber (has to be called from playerManager because playerManager has reference to the playerModel object.)
1 Edit Bullet, added creation of damage Number, when hitting player.

//Get Impact effect to work
1 Edit Bullet, add reference to animator, capsule collider (hitbox), spriteRenderer, and a bulletColor. 
	Added method SetBulletColor, to set the color to player's color
	In Shoot method, set animator trigger shot, set the color to bullet color, and set the rigid body to dynamic.
	In bulletHit set animator trigger hit, to play impact effect. set the color to white, disable the hitbox, make rigidbody static, reset time to live so can play the impact effect,
	before being reset. 
	Also need to set the 
1 Edit NonLocalPlayerGun, when a bullet is added, set its color.

GameServer code
---------------
1 Edit Player, remove invalid move checking, because when player respawned, it causes the player to be though of as cheating.
	Need to fix the issue later.
1 Edit Client, added boolean param to ServerSend.SpawnPlayer calls, which represents if a player is already present in game, or not.
	False when spawning rest of players for the connected user. True when spawning player who just joined to all connected players
1 Edit ServerSend, added boolean param justJoined to SpawnPlayer, to know if player just joined a game or not.

//Get health bar to work'
1 Edit Packet, ""
1 Edit Server, added TookDamage client packet to packet handler.
1 Edit ServerRead, add TookDamageRead method, called by packetHandler, reads the damage, and currentHealth, calls serverSend.TookDamage.
1 Edit ServerSend, add TookDamage method, which sends the player who took damage, the damage and the current health to all but the player who took damage

===============================================================================================================================
Version 0.5.3
-------------

Summary
-------
Main goals is to;
	1 Make so can play on a mobile device.
	1 Implement mobile playermovement via use of polymorphism
	1 Implement mobile playergun via use of polymorphism	
	1 Test on actual build for iOS.	
	
Future tasks;
	version 0.5.4
		add map boundries, so if player falls off map, dies and camera stays in boundry
		Fix bullets being saved in hierarchy after server is shutdown, and player is ejected from game.
		Fix own bullets hitting the player and destroying them when player is running left.
		Implement shooting where the player aims their mouse/touch, have a crosshair and dynamic arms holding gun
		add local and non local player health bars
		add local player stamina bars
		Add muzzel flash when a player shoots, randmonly chooses which animation to play
		Add an impact effect for when the bullet hits a collider
	version 0.5.5 
		add a mixer system, which all sound effects sub categorise and use, so can control volume by settings 
		add sound effects to player running, sprinting, jumping, dying and respawning
		sound effects for bullets being shot and hitting
	version 0.5.6
		add invincibility frames, after being hit/respawning
		

	Assign each player a color, and change the color of name on kill field to corresponding player color.
	change sending playermovement position to vector2 - reduce data sent
	change sending playermovement rotation to bool isGoingRight - reduce data sent
	Fix LAN connection	
	
	Make server sided, currently very client sided
	Make so LAN connection tries to connect to your actual lan connection, and not hard coded values
	
	Add animations to banners
	Add trail effects when a player sprints, so can clearly see player sprinting, also maybe zoom camera out a little bit...

	Add player disconnections if the server suspects the player of movement cheating
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.

	add breathing camera movement when player is idle, going up and down.
	add music Spoiler - Original Mix (Hyper) to game.

TODO Tasks | 1 = done, 0 = not done
-----------------------------------
TODO: Commit to github version needed for testing the game on actual mobile device, not via Unity Remote as it limits the ability for touchscreenKeyboard.


Importing assets
----------------
1 Import Joystick pad, so can use for mobile version

Animations
----------

UnityEditor
-----------
1 In project settings allowed for Unity Remote to connect to any iOS devices. So can use Unity Remote on my iPhone to test the game on iOS device.
1 Added OnSelect and OnDeselect events to the UsernameInputField, which link to SimpleNetworkingUI OnUsernameInputField select & deselect methods.
1 Edit CinemachineCamera on LocalPlayer Lens to 4. Because the players on mobile device were too small.
1 Edited the Canvas, and some of its children to fit onto the new screen resolution.
1 Added a MobileLocalPlayer prefab, which contains mobile localPlayer scripts, playermovement, playergun
1 Added a Floating Joystick prefab into Canvas, so can use and see the joystick in mobile games. 
	Attached MobileJoystick script to it.
1 Deleted Player Dummy prefab, don't need and was causing errors in mobile build.

Implementing scripts
--------------------
1 Edit SimpleNetworkingUI, Added OnUsernameInputFieldSelect and Deselect methods. Which turn on and off the interactable unity input keyboard for mobile devices.
	So can enter username on iOS devices.
1 Edit LocalPlayerMovement, added GetMoveInputX method for getting get axis raw input for horizontal, and so the MobileLocalPlayerMovement can override the method,
	to get the touch version input. Similarly, added GetSprintInput & GetJumpInputPressed / Released, so can override in Mobile version.
1 Add MobileLocalPlayerMovement, inherits from LocalPlayerMovement, overrides GetMoveInputX, SprintInput, JumpInputPressed & Released. 
	Stores reference of a joystick, which is the joystick in the canvas, in order to get horizontal input, if above or equal to RunThereshold, then player will run,
	if its above a sprint threshold, then the player can run.
	The GetJumpInputPressed checks if a jump vertical joystick value is above/equals threshold and the player can jump, if yes, then make player jump, and reset timeBetweenJumps timer, 
	setting canJump to false. The GetJumpInputReleased returns true if the vertical value is lower than jumpThershold.
	CanJump is a boolean set to false if timer between jumps runs out, the timer ensure the player doesn't use all jumps at once, due to input joystick remaining above.
	Activates the joystick on awake, and deactivates it on destroy.	
1 Edit GameManager, add a field to store the mobile player prefab. In the SpawnPlayer method, when local player is spawned, if the device running is touch supported,
	or is the windows or macOS unityEditor, the mobileLocalPlayer is set to the prefab to spawn, otherwise, just normal LocalPlayer prefab.
	Added a IsMobileSupported check, and a testing touch in editor field, which determine whether touch controls, or keyboard/mouse controls are used.

1 Edit LocalPlayerGun, added a method IsPlayerTryingToShoot, which returns if fire1 button is pressed down. Added to inherited MobileLocalPlayerGun is able override it,
	so player shoots when a button is pressed on screen.
1 Added MobileLocalPlayerGun, inherits from LocalPlayerGun, overrides the IsPlayerTryingToShoot, by checking in update if a touch screen has been pressed more than half the screen width.
1 Add MobileJoystick, a Singleton, which holds the joystick gameObject, so can turn on and off, when player joins or exits.

1 Edit KillFeedUI, in awake method the activeKillFeedEntries is set to new Queue<GameObject>, prevents errors when adding killfeed entry.

GameServer code
---------------


===============================================================================================================================
Version 0.5.2
-------------

Summary
-------
Main goals is to;
	1 Add player attacking (shooting), using Polymorphism and Interface
	1 Add player health system, using Polymorphism and Interface
	1 Add player taking damage,  using the health system, bullets and guns
	1 Add player dying and respawning, using C# events, which other scripts can subscribe to, adding functionality,
		with decreased dependencies.
	1 Add kill feed entries, showing players who killed who. Uses queue to keep track of active entries
			
Future tasks;
	add local and non local player health bars
	add local player stamina bars
	Add muzzel flash when a player shoots, randmonly chooses which animation to play
	Add an impact effect for when the bullet hits a collider
	Assign each player a color, and change the color of name on kill field to corresponding player color.
	change sending playermovement position to vector2 - reduce data sent
	change sending playermovement rotation to bool isGoingRight - reduce data sent
	Fix LAN connection	

	Make so can play on a mobile device.
	Make server sided, currently very client sided
	Make so LAN connection tries to connect to your actual lan connection, and not hard coded values
	
	Add animations to banners
	improve collision detection,
	
	Add player disconnections if the server suspects the player of movement cheating
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	imrpove killFeedUI, make entries disappear by decreasing opacity, and popping them back up smoothly instead of vertical layout group which
		pops them and moves other entries up instantly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.

	add breathing camera movement when player is idle, going up and down.
	add music Spoiler - Original Mix (Hyper) to game.

TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Importing assets
----------------
1 Border image for UI killFeed

Animations
----------
1 Bullet
1 Player Die
1 Player Respawn

UnityEditor
-----------
1 Decrease quality of muzzel flash textures
1 Add a bullet prefab, which has a Bullet script, Rigidbody2D, Capsule Collider and Animator, with a Bullet animator controller
1 Add bullet animations to the bullet prefab, added animator and animation.
1 Attach a bullet script to the bullet prefab
1 Edit LocalPlayer prefab, attached LocalPlayerGun, LocalPlayerHealth.
1 Edit OtherPlayer prefab, attached NonLocalPlayerGun, NonLocalPlayerHeatlh
1 Added a PlayerDummy prefab, which was used for testing attacking & IHealth
1 Added FirePoint and UsernameCanvas to PlayerModel. FirePoint used for shooting bullets from a player and Username canvas is used for a world space canvas,
	which displays the username the player entered, before connecting to the server.

1 Add KillFeed, attach KillFeedUI to it, and add child gameObject panel, which holds 15 KillTextEntryPanel.
	

1 Fix the bullet going through the opposite player if touching each other, but make sure player's own bullet can't touch them, made RigidBody of NonLocal players to kinematic,
	seemed to have fixed the issues	
1 Linked playerDie & respawn animations to player animation controller

Implementing scripts
--------------------
1 Add Bullet, is able to be instantiated, and called to be enabled and disabled, via Shoot method which takes the firepoint vector2 and rotation, and ResetBullet which 
	deactivates the gameObject, reseting its TimeToLive timer and made available to be used again (using pooling system to prevent garbage collector collecting lots of garbage)
	The bullet ignores collisions with the platform layer.
	An OnCollisionEnter2D event is used to try and get a IHealth interface with the collided object, if finds it, compares its owner id to bullets owner id, if match then makes the 
	health take damage, random value between DamageMin & DamageMax. BulletHit is called after any collision.
	Has a time to live timer, which resets the bullet, stopping bullets from flying forever.

1 Edit GameManager, added handler for isDead boolean in spawn player packet. Added use of NonLocalPlayer health, movement and animations in spawn player, giving them their clientID,
	and calling coroutine of player being dead, if isDead is true in the SpawnPlayer method.
	Added handler for PlayerDied, which sends to server that localPlayer is dead, by anotherPlayer IDed, calling playerManager died method of client who died, and adding
	killFeedEntry.
	Also added handler for PlayerRespawned, sending to server that player has respawned, and calling playerManager's respawned method. 
1 Edit PlayerManager, added OnPlayerSpeedXChange, OnPlayerDeath & OnPlayerRespawn events, which other scripts can subscribe to, to act when action happens to player.
	Added static RespawnTime & DeadTime, giving other scripts like animations & gun to deactivate & activate when time is right.
	Add reference to IGun of player, so able to shootFrom it when getting a shot bullet packet via ShotBullet method.
1 Added KillFeedUI, Singleton which handles killFeeds. Has references to the killFeed panel, and its entries, and each entries' text.
	When AddKillFeedEntry is called, the playerDiedName and killerPlayerName is added to an unactive entry.
	The entry can have red borders and black fill if the local player killed a  player.
	The entry can be fully filled red if local player was killed.
	The entry can be black if kills are between other non local players.
	An entry is removed after timeToLive amout of time.
	A problem occurs when more kills than entries occur within short period of time where no more entries can be added,
	therefore have to get longest active entry and deactivate, and set to a new a entry, uses a queue to keep track of active entries,
	enques when adding, deques when removing, however can deque longest active entry when no more entries available, to get access to another.

1 Added IGun, interface which is inhereted by local and non local player guns, can Shoot, set owner client id, disabled and enabled
1 Added NonLocalPlayerGun, which inherits form IGun interface, pooling bullets within a list. Able to shoot a bullet, by either getting 1 from pool or adding to pool. 
	Stores clientID, so able to subscirbe to playerManager's OnPlayerDeath & OnPlayerRespawn events. The death event disables the ability to shoot, the respawn event
	re-enables the ability to shoot after static respawnTime held in playerManager.
1 Added LocalPlayerGun, inherits from NonLocalPlayerGun, adds an Update method which checks if Fire1 is pressed, when pressed calls its own ShootBullet method, that takes no params,
	calls the inherited ShootBullet with the FirePoint position and rotation, and ClientSends to server the shot bullet.

1 Add IHealth, interface inherited by NonLocalPlayerHealth, can: TakeDamage, Die, Respawn and GetOwnerClientID
1 Add NonLocalPlayerHealth, inherits from IHealth, has Max health and ownerID, the TakeDamage decreases currentHealth and calls Die player if currentHealth <= 0.
	Die method calls GameManager instance playerDied method, and calls waitBeforeRespawning, which waits static PlayerManager.DeadTime and calls Respawn.
	Respawn resets health to max health and calls GameManager Instance Player respawned method.
1 Add LocalPlayerHealth, inehits from NonLocalPlayerHealth, hasn't extended any functionality yet.

1 Add IAnimations, interface which is inherited by NonLocalPlayerAnimations, can XAxisAnimations, YAxisAnimations, DieAnimation, RespawnAnimation and FlipSprite.
1 Edit NonLocalPlayerAnimations, inherits from IAnimations, references IWalkingPlayer instead of EntityWalking. Subscribes to PlayerManager's OnPlayerDeath and OnPlayerRespawn,
	with DieAnimation and RespawnAnimation, which trigger respective animations.
	Needs IWawlkingPlayer reference to get speedX of player.
1 Edit LocalPlayerAnimations, which still gets PlayerMovementNetworking script to get if player hasJumped. Overrides YAxisAnimations to call base method and trigger Jumped, if player
	hasJumped returns true

1 Add IWalking, inherited by EntityWalking and IWalkingPlayer, can Get if entity is Grounded.
1 Add IWalkingPlayer, inherits from IWalking, inherited by NonLocalPlayerMovement, extends can GetSpeedX and GetRunSpeed.
1 Edit EntityWalking, inherits from IWalking, implements GetGrounded, and also Freeze and UnFreeze motion.
1 Add NonLocalPlayerMovement, inherits from EntityWalking and IWalkingPlayer. Implements GetRunSpeed & SpeedX, abd sets ownerID. Now references playerManager to subscribe more events:
	OnPlayerSpeedXChanged; setting the SpeedX, 
	OnPlayerDeath; Freezing motion and disabling hitbox, 
	OnPlayerRespawn; UnFreezing motion and hitbox after static PlayerManager.RespawnTime
1 Edit PlayerMovementNetworking - renamed to LocalPlayerMovement, now inherits from NonLocalPlayerMovement, and calls GetGrounded instead of Grounded in MovementY.

1 Edit Client, added to PacketHandlerDict bullet shot, player died & respawned packets.
1 Edit ClientRead, Added packet handling for: 
	BulletShot; reads playerID, position & rotation of a bullet, shooting the bullet via PlayerManager dict.
	PlayerDied; reads ids of killed and killer, calls killFeedUI to add a kill feed entry, and calls PlayerDied via PlayerManager dict.
	PlayerRespawned; reads id, and calls PlayerRespawned via PlayerManager dict.
1 Edit ClientSend, sending the ShotBullet, PlayerDied and Respawned packets.
1 Edit Packet, added to server; bulletShot, playerDied, playerRespawned 
	and client; bulletShot, playerDied, playerRespawned enums

1 Bug, fix dead players appearing alive in game when a player just joins in, after the players were killed, adding to SpawnPlayer packet a bool isDead, which 
	is stored in Server, if arrives to player and is true, then calls onPlayerDeath event on corresponding player when joining.
1 Bug, bullet shot from LocalPlayer point blank, doesn't hits the non local player in localPlayer's game, however it does hit in non local player's game
	Edited Bullet OnCollisionEnter2D, so also calls BulletHit after getting IHealth which is not null.
1 Bug, player respawning is still able to be hit by other player, and move, fixed by activating hitbox when unfreezing motion.

GameServer code
---------------
1 Edit Packet, ""
1 Eidt Player, add isDead field which is set by Died & respawned methods from ServerRead
1 Edit Server, add to PacketHandler dict bulletShot, playerDied & respawned packets.
1 Edit ServerRead, added packet handlers:
	BulletShot; receives and calls ServerSend shotBullet with id, position & rotation of bullet.
	PlayerDied; gets the killer id and calls ServerSend playerDied, and sets player's isDead to true via Player.Died
	PlayerRespanwed; ServerSends the player who respawned and sets player's isDead to false via Player.Respawned
1 Edit ServerSend, added player.isDead to spawn packet, added packets to send:
	ShotBullet; sends tcpPacket to all but player who shot bullet.
	PlayerDied; sends tcpPacket to all but player who died.
	PlayerRespawned; sends tcpPacket to all but player who respawned.

===============================================================================================================================
Version 0.5.1
-----------

Summary
-------
Main goals is to;
	1 Add non local player animations using Polymorphism

			
Future tasks;
	Add player attacking (shooting),
	Add player taking damage
	Add player dying and respawning
	Fix LAN connection	

	Make so can play on a mobile device.
	Make so LAN connection tries to connect to your actual lan connection, and not hard coded values
	
	Add animations to banners
	improve collision detection,
	
	Add player disconnections if the server suspects the player of movement cheating
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.

	add breathing camera movement when player is idle, going up and down.
	add music Spoiler - Original Mix (Hyper) to game.

TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Importing assets
----------------

UnityEditor
-----------
1 Added NonLocalPlayerAnimations and EntityWalking to OtherPlayer prefab. So non local players are animated.

Implementing scripts
--------------------
1 Added NonLocalPlayerAnimations, which is similar to PlayerAnimationsNetworking, enables to be put onto non local players, and get updates
	of the player movement stats, changing SpeedX of the player, using the Event defined in PlayerManager script.
1 Renamed PlayerAnimationsNetworking script to LocalPlayerAnimations, and made it to so it inherets from NonLocalPlayerAnimations.
	Overrides awake, fixedUpdate and YaxisAnimations, so able to correct the SpeedX and triggering the jumped animation trigger.
1 Add EntityWalking, script placed on non local players, and for future enemies, which is a brief PlayerMovementNetworking script, with a ground check.
	PlayerMovementNetworking inherits from it.
1 Edit PlayerMovementNetworking, made it inherit from EntityWalking, took away methods and properties that are found in the inherited class.
1 Edit Client, changed PacketHandler dictionary initiliasation to combine the playerVelocity and playerRotation, and added player movement stats.
1 Edit ClientRead, added reading of runSpeed and sprintSpeed to the spawn packet. Added a new handler for playerMovementStats packet, which sets the player movement stats of a player.
1 Edit ClientSend, changed the Vector3 to a vector2, so habe to transmit less data.
1 Edit PlayerManager, added a delegate and event which notifies the subscribed nonLocalPlayerAnimations of a change in the playermovement stats, removed rigidBody because it was not used, 
	and added velocity and player movement stats fields. 
1 Edit Packet, added server packets for playerRotationAndVelocity and movement stats. Added a vector2 write and read method.

GameServer code
---------------
1 Edit Packet, added server packets for playerRotationAndVelocity and movement stats. Added a vector2 write and read method.
1 Edit Player, changed velocity to vector2, made runSpeed and sprintSpeed public, calls to send the PlayerRotationAndVelocity, not just rotation.
1 Edit ServerRead, changed velocity to vector2, and added a serverSend call of the playerMovementStats when receiving a movement stats packet, which sends it to all players.
1 Edit ServerSend, changed seperate PlayerRotation and velocity packets into 1, and added a movement stats packet, sending to all via TCP to make sure it doesn't get lost.w

===============================================================================================================================
Version 0.4
-----------

Summary
-------
Main goals is to;
	1 Let the player choose how to try connect to the server, via LocalHost, LAN or Internet. Allowing for over internet connections,
		an IP connectiong setting dropdown list
	1 Add player user names to the players, so players can know who is in the server.
	1 Add timeouts, so if player trying to connect to server for too long, gets timed out. Allowing for player to try and reconnect, if chosen
		wrong IP connection setting, or the server is just slow.
	1 Make a Level 1 map, and load into game so can see how action on a map occurs.

			
Future tasks;
	Fix non local player animations
	Make so can play on a mobile device.
	Make so LAN connection tries to connect to your actual lan connection, and not hard coded values
	Decrease quality of the sprites used in game, reducing space and execution speed.
	Add animations to banners
	improve collision detection,
	add player attacking (shooting),
	add player taking damage
	add player dying and respawning
	Add player disconnections if the server suspects the player of movement cheating
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.
	improve UI, adding pop up animations to the UI elements instead of just appearing instantly.
	improve UI, adding black borders to UI Panels like TimeOutPanel.

	add breathing camera movement when player is idle, going up and down.
	add music Spoiler - Original Mix (Hyper) to game.

TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Importing assets
----------------
1 Level 1 - Warped_city art assets.

UnityEditor
-----------
1 Add a OnValueChanged event to the InputField, which calls OnUsernameInputField method in SimpleNetworkingUI, checks if the username entered is valid, if valid makes 
	Connect button interactable, if not then not interactable.
1 Add a IPAddress TMP dropdown list, which is responsible for player choosing what IPAddress to connect to. Has OnValueChanged event, which calls SimpleNetworkingUI
	OnIPAddressDropDownChanged.
1 Added Description Text, child of IPAddressDropdown, mentions that 
1 Make a PlayerModel prefab, which just holds the player model, rigidbody and capsule collider.
1 Edit LocalPlayer, so it holds a child gameObject of PlayerModel, delete the player model from the parent Local player object. Set cinemachine follow to the PlayerModel.
1 Make OtherPlayer gameObject, which is the non-local player, child the PlayerModel to it, and add PlayerManagerScript to it.
1 Added a UI canvas (UsernameCanvas) and TextMeshProText (Username Text TMP) as children to PlayerModel, so the player username can be displayed.
1 Added a IgnoreParentRotation script to the UsernameCanvas, so flipping the sprite of the gameObject doesn't change the 
1 Added a TimeOutPanel, TimeOut Text, Continue Button, to act as a time out message when a connection fails via a timeout. The Continue Button has an onClick event which calls the 
	SimpleNetworkingUI OnTimeOutContinueBtnPresss.
1 Edit Shooter sprite pixels per unit, decreasing the player size.
1 Edit CinemachineCamera lens to 6, so can see more of the map.
1 Added folder for Prefabs from Warped_city art, including banners, and individual parts.
1 Add 5 different house types into the game.
1 Add a new Scene named Level 1, use the houses made to make a basic level.
1 Add background to game.
1 Added 3 different prespective cameras that view individual background elements, allowing for a parallex effect.
1 Increased gravity to -15.81, felt better when the player is jumping, speeding up the time it takes for the player to hit the ground, feels more responsive.
1 Increased animation Samples to the Run animation to 7, and to Sprint animation to 8, making the player feel more responsive and faster.

Implementing scripts
--------------------
1 Edit Client, Add different IP addresses; localHost, LAN and Internet, so can connect computers wherever they are. (Portwarded on my router)
	Added method ChangeIPAddressConnectTo, which changes the IPAddress which the player will connect to, called by SimpleNetworkingUI.
	Added timer and methods which work on the connection time out, timer is started when the ConnectToServer is called, and stopped when either the timer reaches a TimerTimeOutTime
	value, or when a SuccessfullyConnected method is called. When the time out occurs, the ConnectionTimedOut is called, which disconnects the client from the server, and displays
	the TimeOutPanel. When a successful connection occurs, ClientRead welcome read calls the successful connection method, the timer is reset and turned off.
1 Edit SimpleNetworkingUI, Added OnUsernameInputFieldChanged, called by OnValueChanged event on InputField, then calls inputfield validation method, 
	and makes the ConnectBtn interactable when valid.
	Also added a OnIPAddressDropdownChanged method, which is called by OnValueChanged event on IPAddressInputField, calls Client's ChangeIPAddressConnectTo, giving the index
	of the IPAddress.
	Added a DisplayTimeOutMessage, which activates the TimeOutPanel and calls the SetInteractableConnectionMenu with false, so player has to read message and press ContinueButton.
	Added a OnTimeOutContinueBtnPress, which is called by Continue button, deactivates the TimeOutPanel and makes the connection menu interactable.
1 Edit PlayerManager, cache the player model gameObject, and reference its rigidBody in the initialise and transfrom in SetPosition.
	Added a SetRotation method which changes the PlayerModel rotation.
1 Edit PlayerMovementNetworking, cache the player model gameObject, and set its rigidBody, CapsuleCollider in Awake, also change SendMovesToServer to send the PlayerModel's data.
	Added IgnoreLayerCollisions in MovementY, which ignores collision between the gameObject's layer attached to it, and the Platform layer when going up and when holding press
	down button.
1 Edit PlayerAnimationsNetworking, cache the player model gameObject, get its animator, and change its transform in FlipSprite;
1 Bug: When sending the position of player to server, sometimes the opposite value for x coord gets sent... 
	Only happens when turning the player...
	Checked for packets sent from player to server, the error in position doesn't occur from sending local player packets, happens on the server or receiving end.
	Deoesn't occur when setting position from received packet... 
	The point at which the x coordinate is changed is the initial spawn location of the object that it happens on...
	It is to do with the OtherPlayer gameObject rotation being changed, so the PlayerModel position coordinate x changes from negative to positive or positive to negative, 
	so sometimes doesn't have time to switch the rotation, causing the problem, transform change sent from server should apply to PlayerModel, not to OtherPlayer!
1 IgnoreParentRotation, resets the gameObject's transform to 0,0,0 every late, overriding changes made in transform update of parent object. 
1 Edit ClientRead, in PlayerRotation, instead of changing the player's actual rotation, a SetRotation method is called.
	Edited the WelcomeRead method to call the Client instance SuccessfullyConnected method, instead of just setting the id of client manually.


GameServer code
---------------
1 Edit ServerRead, put a try catch block for the PlayerMovementRead, because ran into issues, where a packet is received from an already deleted player, causing crashing.

===============================================================================================================================
Version 0.3
-----------

Summary
-------
Main goal is to fix camera jiteriness, stop the non local players from teleporting quickly when falling and jumping,
	 handle client and server disconnects
	1 import and use cinemachine camera, so gets rid of jetiry motion of the camera
	1 stop non local player teleporting when in air
	1 handle client disconnections (still issues when 2 or more clients disconnect simultaneously)
			
Future tasks;
	improve collision detection,
	player attacking (shooting),
	player dying and respawning
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	make the ThreadManager to work on multi-threading
	prevent crashing and stopping receiving packets from client to server when 2 or more clients disconnect simultaneosly.

TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Importing assets
----------------
1 Cinemachine, will use the cinemachine camera for local player, so camera will be smooth and in future can easily add camera effects for shooting, taking damage, etc...

UnityEditor
-----------
1 Removed and deleted from project the SimpleCameraFollow script from camera that looks at the player.
1 Added CinemachineBrain to Main Camera, which will be used as parent for other cameras that look at the foregroumd, background and etc...
1 Added a CinemachineCamera and CinemachineVirtualCamera to the it that will follow the player.
1 Adjusted CinemachineVirtualCamera to follow and look at the LocalPlayer, and tweaked Aim component to have a Composer camera with adjusted zones.
1 Added LocalPlayer layer which is set to LocalPlayer, so can use normal Player as whatIsGround to fix infinite jumping due to detecting itself as ground.
1 Added to LocalPlayer whatIsGround the player layer, so can bounce on other players.
1 Set non local Player Rigidbody2D into Static mode, preventing local machine calculating the gravity and creating a teleporting effecting when in air.


Implementing scripts
--------------------
1 DetachFromParent, sets gameObject transform parent to null, applied to CinemachineCamera
1 Edit Client, added proper disconnections to the TCP, UDP and Client instance itself to disconnect from the server properly, inside the try catch blocks in BeginReadReceiveCallBacks.
	Moved instantiation of tcp and udp to the ConnectToServer method instead of Start, allowing for player to be re-connect after server is shutdown.
1 Edit Packet, added playerDisconnect to ServerPackets enum, so server able to sends to connected clients that a player has disconnected.
1 PlayerCameraController, holds the CinemachineCamera gameObject, needs to be assigned by Inspector, adds an OnDestroyObject method which destroys the camera, when the LocalPlayer is destroyed.
	Preventing multiple CinemachineCameras being around, when the server is shutdown and player is sent back to Connect Screen.
1 Edit SimpleNetworkingUI, added Disconnected method which re-enables the Networking UI, after Local client is disconnected.
1 Edit PlayerManager, added Disconnect method which destroys the LocalPlayer gameObject. Called by GameManager, upon getting the disconnect client packet, and when localPlayer is disconnected.
1 Edit ClientRead, added a PlayerDisconnect packet handler, which calls Disconnect method of PlayerManager.
1 Edit GameManager, added Disconneting particular and DisconnetingAllPlayers method.

GameServer code
---------------
1 Edit Client, added similar disconnections to the TCP, UDP and Client.
1 Edit Packet, ""
1 Edit Player, Changed in ValidMove, the xMaxLeftTravelledLeft - 0.5f, instead of + 0.5f, due to going left/negative x direction.
1 Edit ServerSend, added DisconnectPlayer packet which is sent to all players via TCP.
1 Edit Server, added an event for when the console application is closed, which stops the tcpListener and udpClient, preventing server from listening to the port when shutting down.


===============================================================================================================================
Version 0.2
-----------

Summary
-------
Main goal is to set up multi-player; 
	1 setup a game server using .NET Core - so able to run on Windows, Mac, Linux machines
	1 setup communication between game server and Unity project, via TCP (important packets) and UDP (real-time packets),
	1 spawn players when joining server	
	1 sync player movements
			
Future tasks;
	import cinemachine camera, so gets rid of jetiry motion of the camera
	improve collision detection,
	player attacking (shooting),
	player dying and respawning
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint
	make the ThreadManager to work on multi-threading


TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Importing assets
----------------
1 TMP (TextMeshPro) Essentials - used for higher resolution texts that appear on the screen.

UnityEditor
-----------
1 Updated UnityEditor to version 2020.1.12f1
1 Creating a ClientManager gameObject and attaching to Player - Holds the Client, ClientRead & ThreadManager Scripts
1 Making a Canvas that holds the NetworkMenu gameObject which has the SimpleNetworkingUI script, that controls when to connect the client to server.
	Through use of a ConnectBtn, which has an onClickEvent that triggers the ConnectToServer method in SimpleNetworkingUI.
1 Made a LocalPlayer and Player prefabs, similar to original Player gameObect. 
	LocalPlayer contains PlayerMovementNetworking and PlayerAnimationsNetworking scripts
	Player doesn't contain the scripts for playerMovement, and animation, to prevent the local client controlling not their own players.
	Both contain PlayerManager script, so can update local and other players.

Materials
---------
1 LocalPlayer material which makes the local player sprite Red
1 Player material which makes the other player sprites Blue


Implementing scripts
--------------------
1 Client, singleton, holds the client id, tcp, databuffersize (used as a the number of bytes that is sent with each transmission), IP address and port number.
	The tcp is a class which contains a TcpClient (socket), the id, byte array which is the stream receive buffer, and a NetworkStream.
	A Connect method assigns a new socket, then assigns the same send & receive buffer sizes to the data buffer size of the Client.
	The socket begins to connect to the IP, port through its own state. Giving ConnectCallback method as the AsyncCallback, which checks for connection and begins to read data stream
	The NetworkStream is assigned to the socket stream. Data is then continuosly read, until an error occurs or the no bytes are sent in the stream.
	Initialises the Packet dictionary.
1 SimpleNetworkingUI, singleton, which holds the NetworkMenu (UI element which is turned off when a ConnectBtn is clicked on, contains the ConnectBtn and the UserName InputField)
	Gets the NetworkMenu and username inputField from the children gameObjects. 
	Has a ConnectToServer method which is triggered by the ConnectBtn, which deactivates the NetworkMenu and Calls the Client singleton to connect to server.
1 ClientRead, used to read contents of packets sent to the client, and handles the data. Currently able to read a welcome packet, setting ClientID of Client to the id received in packet 
	and print the welcome message from server. Calls ClientSend.WelcomePacketReply to send back the ClientID and Username. Receives UDPTest packet and calls the reply to server.
	Reads spawnPlayer, playerPosition, playerVelocity and playerRotation packets.
1 ClientSend, used to send packets from client to the server. Currently able to send confirmation that a welcome packet received, sending back ClientID and Username entered.
	Able to send packet as TCP or UDP, as well as replying to Welcome and UDP test packets.
	Sends out PlayerMovement and PlayerMovementStats packets.
1 Packet, same Packet class as used in GameServer code
1 ThreadManager, a single thread manager, used to execute networking commands in a queue, need to remake it make it multi-threaded. To get things up and running I used a pre-made ThreadManager class
1 GameManager, singleton which holds all the playerManagers, LocalPlayerPrefab and PlayerPrefab. Responsible for spawning players.
1 PlayerManager, holds the ID, username and rigidBody of player, able to set the position of player and add velocity to the rigidBody of the player.
1 PlayerMovementNetworking, same as PlayerMovement, however now also sends the position of player to Server, and sends the playerMovementStats to the server, runSpeed and sprintSpeed, so checks for valid moves.

GameServer code
---------------
1 Program, holds the start point of the game server, initialises a console application, and calls the Server.StartServer with player number limit and port to use.
	Sets a new thread, which is used to call MainThread, which updates the GameLogic every tick.
	Currently a 30 tick server, so unity game project was set to 30 ticks to, to prevent data being sent that should be ignored.
1 Server, holds the player limit, port number that is used for the connection, clients (dictionary) and a tcpListener (used to listen to tcp requests). 
	The server initiliases all clients on starting, populating the client dictionary, and intiliasing all the packets to read.
	Assigns new tcpListener that can communicate on any IP addresses, on port number stored.
	The tcpListener starts to listen to requests, and begins accepting clients indefinetely.
	
1 Client, holds the client id, tcp and databuffersize (used as a the number of bytes that is sent with each transmission).
	The tcp is a class which contains a TcpClient (socket), the id, byte array which is the stream receive buffer, and a NetworkStream.
	A Connect method takes a TcpClient (socket) and assigns to its own socket, then assigns the same send & receive buffer sizes to the data buffer size of the Client.
	The NetworkStream is assigned to the socket stream. Data is then continuosly read, until an error occurs or the no bytes are sent in the stream.
	SendIntoGame, sends the player into the game, by creating new Player, spawning that player into all other connected clients, also spawns all connected clients to the new player.
1 Packet, using an already made Packet class, could write my own Packet class but that would take too long, due to need to learn translation from datatypes to bytes and back... 
	Translates data like int, float, string into bytes, and translates the bytes back into the datatypes. Using the buffer, readposition (used for assigning how many bytes are read and written
	due to different datatypes taking up different number of bytes).
	Has enum ServerPackets which holds all packets the server sends, and enum ClientPacket holding the packets that the client sends to server.
1 ThreadManager, same class as in Unity Project, used to queue actions like updating GameLogic.
1 ServerSend, sends packets from the server to the Clients, using Packet syntax. Can send to specific recipient, all or exclude specific clients. Able to send via TCP or UDP. Sends the Welcome, UDPTest, SpawnPlayer
	Player position, velocity and rotation packets.
1 ServerRead, reads packets sent from Clients to the Server. Gets back Welcome packet with clientID and username, then stores username inside ClientDictionary - Player. 
	Receives the UDPTest Packet, and the PlayerMovement and PlayerMovementStats.
1 GameLogic, will act as processor of game data, calls ThreadManager.UpdateMain when Update is called. Called by Program MainThread, where a single thread is made and used to update the game state.
	Calls the connected players' Update methods.
1 Player, holds all data on the player server side, ID, username, position, velocity, rotation...
	Has an Update method, which currently calls MovePlayer, which calls ServerSend to send the player's position and rotation to all other players, apart from self.
	Checks if the position that the player now is valid (only checks the X axis so far, but need to check Y axis), if not valid then sends the valid possible to all players including itself self. 



===============================================================================================================================
Version 0.1
-----------

Summary
-------
Main goal is to set up the player; 
	1 player movement (running, jumping, sprint),
	1 simple camera script that follows the player,
			
Future tasks;
	multi-player
	player attacking (shooting),
	player dying and respawning
	make a movement cooldown if a player fully exhausted the stamina bar, decrease run speed, don't allow to try and sprint


TODO Tasks | 1 = done, 0 = not done
-----------------------------------

Importing assets
----------------
1 Player sprites with animations
1 Gun sprites (integrated with player so don't need seperate)
1 Gun shot projectiles with animations
1 Gun shot blast sprays with animations

UnityEditor
-----------
1 Set up static ground player can run on for testing
1 Set up a player object, with Rigidbody2D, CapsuleCollider2D, PlayerMovement, Animation Controller, PlayerAnimations

1 Add Tags: Platform, Enemy, Ground-Static
1 Add Sorting Layers: UI, Foreground, Ground, Player, Enemy, Platform, Middleground
1 Add Layers: Player, Ground-static, Platform

Animations
----------
1 Idle
1 Run
1 Sprint
1 Jump
1 Land
1 Die

Animator
--------
1 Idle to Run and back
1 Run to Sprint and back
1 Idle to Sprint and back
1 Any State to Jump
1 Jump to Land and back (back prevents from being stuck in a Land loop if not detecting ground after jump)
1 Land to Run
1 Land to Idle
1 Land to Sprint


Implementing scripts
--------------------
1 PlayerMovement, which allows the player to run and sprint, using branched, branchless, hybrid branched/brancless methods (hybrid is executed fastest)
1 PlayerAnimations, giving the player animations, via use of animation data that is received from PlayerMovement, through GetAnimationData(), flip sprite when moving in opposite direction
1 SimpleCameraFollow, makes the camera follow the player, when the camera child of the player is detached from player, so can see player facing left and right